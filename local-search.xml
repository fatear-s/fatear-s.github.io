<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>javaWeb</title>
    <link href="/2024/12/09/javaWeb/"/>
    <url>/2024/12/09/javaWeb/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>![image-20241209170002293](&#x2F;Users&#x2F;liutao&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20241209170002293.png)</p><p>技术栈</p><p>![image-20241209170130894](&#x2F;Users&#x2F;liutao&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20241209170130894.png)</p><h3 id="MDN文档"><a href="#MDN文档" class="headerlink" title="MDN文档"></a>MDN文档</h3><h3 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h3><p>网页结构</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><br>#给浏览器识别的<br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>标题<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>#给用户看的内容<br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>标签语言</p><p>标签</p><p>浏览器解析</p><h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>网页表现</p><p>层叠样式表</p><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><p>网页动作</p><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><h3 id="js引用"><a href="#js引用" class="headerlink" title="js引用"></a>js引用</h3><p>方式1</p><p>javaScript 放在<script></script>之间</p><p>一般放在<body>元素底部</p><p>方式2</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span> = <span class="hljs-string">&quot;js/demo.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>不能自闭合</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span> /&gt;</span><br></code></pre></td></tr></table></figure><h3 id="js语法"><a href="#js语法" class="headerlink" title="js语法"></a>js语法</h3><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JavaScript"><span class="hljs-comment">//警告框</span><br>windows.<span class="hljs-title function_">alert</span>()<br><span class="hljs-comment">//在HTML中写入内容</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>()<br><span class="hljs-comment">//写入浏览器控制台</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>()<br><span class="hljs-comment">//变量</span><br><span class="hljs-keyword">let</span> a= <span class="hljs-number">90</span>;<br><span class="hljs-comment">//常量</span><br><span class="hljs-keyword">const</span> <span class="hljs-variable constant_">PI</span> = <span class="hljs-number">3.1415926</span>;<br><br></code></pre></td></tr></table></figure><h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><p>number（整数，小数，Nan）</p><p>String  “”,’’,&#96;&#96;</p><p>boolean</p><p>null</p><p>undefined</p><p>使用typeof返回类型</p><p>typeof 12;</p><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">func</span>(<span class="hljs-params">参数<span class="hljs-number">1</span>,参数<span class="hljs-number">2</span>,...</span>)&#123;<br><span class="hljs-comment">//code</span><br>&#125;<br></code></pre></td></tr></table></figure><ul><li>形参不需要声明类型，并且JS中不管什么类型都是let去声明，加上也没有意义。</li><li>返回值也不需要声明类型，直接return即可</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> result = <span class="hljs-keyword">function</span>(<span class="hljs-params">a,b</span>)&#123;<span class="hljs-keyword">return</span> a+b;&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-title function_">result2</span> = (<span class="hljs-params">a,b</span>)=&gt;&#123;<span class="hljs-keyword">return</span> a+b;&#125;<br></code></pre></td></tr></table></figure><h4 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javaScript"><span class="hljs-keyword">let</span> <span class="hljs-title class_">Object1</span> = &#123;<br>属性<span class="hljs-number">1</span>：值，<br>属性<span class="hljs-number">2</span>：值，<br>方法名称:<span class="hljs-keyword">function</span>(<span class="hljs-params">参数列表</span>)&#123;&#125;<br>&#125;;<br><br><span class="hljs-comment">//调用</span><br><span class="hljs-title class_">Object1</span>.属性名<br><span class="hljs-title class_">Object2</span>.方法名()<br></code></pre></td></tr></table></figure><h4 id="Json"><a href="#Json" class="headerlink" title="Json"></a>Json</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">//json格式</span><br><span class="hljs-punctuation">&#123;</span><br><span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span>value<span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span>value<span class="hljs-punctuation">,</span><br><span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span>value<br><span class="hljs-punctuation">&#125;</span><br><br><br><span class="hljs-comment">//3. JSON - JS对象标记法</span><br>let person = <span class="hljs-punctuation">&#123;</span><br>  name<span class="hljs-punctuation">:</span> &#x27;itcast&#x27;<span class="hljs-punctuation">,</span><br>  age<span class="hljs-punctuation">:</span> <span class="hljs-number">18</span><span class="hljs-punctuation">,</span><br>  gender<span class="hljs-punctuation">:</span> &#x27;男&#x27;<br><span class="hljs-punctuation">&#125;</span><br>alert(JSON.stringify(person)); <span class="hljs-comment">//js对象 --&gt; json字符串</span><br><br>let personJson = &#x27;<span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;heima&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;age&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">18</span><span class="hljs-punctuation">&#125;</span>&#x27;;<br>alert(JSON.parse(personJson).name);<br></code></pre></td></tr></table></figure><p>JSON.stringify(…)：作用就是将js对象，转换为json格式的字符串。</p><p>JSON.parse(…)：作用就是将json格式的字符串，转为js对象。</p><h4 id="JS-DOM"><a href="#JS-DOM" class="headerlink" title="JS DOM"></a>JS DOM</h4><ul><li>Document：整个文档对象</li><li>Element：元素对象</li><li>Attribute：属性对象</li><li>Text：文本对象</li><li>Comment：注释对象</li></ul><p>![image-20250103203709155](&#x2F;Users&#x2F;liutao&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20250103203709155.png)</p><p>DOM操作</p><h4 id="获取DOM元素对象"><a href="#获取DOM元素对象" class="headerlink" title="获取DOM元素对象"></a>获取DOM元素对象</h4><p>操作DOM对象的属性或者方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//根据CSS选择器来获取DOM元素，获取到匹配到的第一个元素：document.querySelector(&#x27;CSS选择器&#x27;);</span><br><span class="hljs-comment">//据CSS选择器来获取DOM元素，获取匹配到的所有元素：document.querySelectorAll(&#x27;CSS选择器&#x27;);</span><br><br></code></pre></td></tr></table></figure><h4 id="JS监听事件"><a href="#JS监听事件" class="headerlink" title="JS监听事件"></a>JS监听事件</h4><p>HTML事件是发生在HTML元素上的 “事情”</p><p>给这些事件绑定函数，当事件触发时，可以自动的完成对应的功能，这就是事件监听。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//语法</span><br>事件源.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&quot;事件类型&quot;</span>,要执行的函数);<br><span class="hljs-comment">//事件源: 哪个dom元素触发了事件, 要获取dom元素</span><br><span class="hljs-comment">//事件类型: 用什么方式触发, 比如: 鼠标单击 click, 鼠标经过 mouseover</span><br><span class="hljs-comment">//要执行的函数: 要做什么事</span><br></code></pre></td></tr></table></figure><h4 id="常见事件"><a href="#常见事件" class="headerlink" title="常见事件"></a>常见事件</h4><h5 id="鼠标"><a href="#鼠标" class="headerlink" title="鼠标"></a>鼠标</h5><p>click</p><p>mouseenter</p><p>mouseleave</p><h5 id="键盘"><a href="#键盘" class="headerlink" title="键盘"></a>键盘</h5><p>keydown</p><p>Keyup</p><h5 id="焦点：指用户与网页上可交互元素（如输入框、按钮、链接等）进行交互时，系统对该元素的“关注”状态。可以粗浅的认为是光标"><a href="#焦点：指用户与网页上可交互元素（如输入框、按钮、链接等）进行交互时，系统对该元素的“关注”状态。可以粗浅的认为是光标" class="headerlink" title="焦点：指用户与网页上可交互元素（如输入框、按钮、链接等）进行交互时，系统对该元素的“关注”状态。可以粗浅的认为是光标"></a>焦点：指用户与网页上可交互元素（如输入框、按钮、链接等）进行交互时，系统对该元素的“关注”状态。可以粗浅的认为是光标</h5><p>focus</p><p>Blur</p><h5 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h5><p>input</p><p>submit</p><h3 id="Vue框架"><a href="#Vue框架" class="headerlink" title="Vue框架"></a>Vue框架</h3><h5 id="Vue快速入门"><a href="#Vue快速入门" class="headerlink" title="Vue快速入门"></a>Vue快速入门</h5><h5 id="Vue常用指令"><a href="#Vue常用指令" class="headerlink" title="Vue常用指令"></a>Vue常用指令</h5><h5 id="Vue声明周期"><a href="#Vue声明周期" class="headerlink" title="Vue声明周期"></a>Vue声明周期</h5><h3 id="Maven"><a href="#Maven" class="headerlink" title="Maven"></a>Maven</h3><h4 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h4><p>之前的项目中，需要下载jar包，使用maven只需要配置xml文件</p><h4 id="项目构建"><a href="#项目构建" class="headerlink" title="项目构建"></a>项目构建</h4><h4 id="统一的项目结构"><a href="#统一的项目结构" class="headerlink" title="统一的项目结构"></a>统一的项目结构</h4><p>不同IDE会产生不同的结构，但是使用maven是统一的架构，都可以使用</p><ul><li>项目对象模型 (Project Object Model)</li><li>依赖管理模型(Dependency)</li><li>构建生命周期&#x2F;阶段(Build lifecycle &amp; phases)</li></ul><h4 id="项目对象模型"><a href="#项目对象模型" class="headerlink" title="项目对象模型"></a>项目对象模型</h4><p>将我们自己的项目抽象成一个对象模型，有自己专属的坐标</p><p>坐标，就是资源(jar包)的唯一标识，通过坐标可以定位到所需资源(jar包)位置。</p><p>坐标的组成部分：</p><ul><li>groupId: 组织名</li><li>arfitactId: 模块名</li><li>Version: 版本号</li></ul><h4 id="依赖管理模型"><a href="#依赖管理模型" class="headerlink" title="依赖管理模型"></a>依赖管理模型</h4><p>现在我们只需要在pom.xml中配置依赖的配置文件即可。 而这个依赖对应的jar包其实就在我们本地电脑上的maven仓库中。 </p><ol><li>在pom.xml中编写<code>&lt;dependencies&gt;</code>标签</li><li>在<code>&lt;dependencies&gt;</code>标签中使用<code>&lt;dependency&gt;</code>引入坐标</li><li>定义坐标的 <code>groupId</code>、<code>artifactId</code>、<code>version</code></li><li>点击刷新按钮，引入最新加入的坐标</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 依赖 : spring-context --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.1.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果不知道依赖的坐标信息，可以到mvn的中央仓库（<a href="https://mvnrepository.com/%EF%BC%89%E4%B8%AD%E6%90%9C%E7%B4%A2">https://mvnrepository.com/）中搜索</a></p><p>IDEA （Alt + Insert）搜索</p><h4 id="依赖传递"><a href="#依赖传递" class="headerlink" title="依赖传递"></a>依赖传递</h4><p>我们可以通过Maven中的排除依赖功能，来将这个依赖排除掉。</p><h4 id="依赖排除"><a href="#依赖排除" class="headerlink" title="依赖排除"></a>依赖排除</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-context<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.1.4<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!--排除依赖, 主动断开依赖的资源--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>io.micrometer<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>micrometer-observation<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="依赖范围控制"><a href="#依赖范围控制" class="headerlink" title="依赖范围控制"></a>依赖范围控制</h4><p>在maven中，如果希望限制依赖的使用范围，可以通过 <code>&lt;scope&gt;…&lt;/scope&gt;</code> 设置其作用范围。</p><h3 id="maven仓库"><a href="#maven仓库" class="headerlink" title="maven仓库"></a>maven仓库</h3><p>Maven仓库分为：</p><ul><li>本地仓库：自己计算机上的一个目录(用来存储jar包)</li><li>中央仓库：由Maven团队维护的全球唯一的。仓库地址：<a href="https://repo1.maven.org/maven2/">https://repo1.maven.org/maven2/</a></li><li>远程仓库(私服)：一般由公司团队搭建的私有仓库</li></ul><p>jar包的查找顺序，本地仓库 –&gt; 远程仓库–&gt; 中央仓库</p><h4 id="安装MaVen"><a href="#安装MaVen" class="headerlink" title="安装MaVen"></a>安装MaVen</h4><p>下载Maven安装包，链接<a href="https://maven.apache.org/download.cgi">https://maven.apache.org/download.cgi</a></p><p>解压安装包</p><p>配置环境变量，将以下的命令添加到~&#x2F;.zshrc文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">export</span> MAVEN_HOME=<span class="hljs-string">&quot;/Users/liutao/tools/apache-maven-3.9.9&quot;</span><br><span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;<span class="hljs-variable">$MAVEN_HOME</span>/bin:<span class="hljs-variable">$PATH</span>&quot;</span><br></code></pre></td></tr></table></figure><p>maven坐标3组成</p><ul><li>groupId：定义当前Maven项目隶属组织名称（通常是域名反写，例如：com.itheima）</li><li>artifactId：定义当前Maven项目名称（通常是模块名称，例如 order-service、goods-service）</li><li>version：定义当前项目版本号<ul><li>SNAPSHOT: 功能不稳定、尚处于开发中的版本，即快照版本</li><li>RELEASE: 功能趋于稳定、当前更新停止，可以用于发行的版本</li></ul></li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>（重点在于尝试）</p><h3 id="SpringBootWeb"><a href="#SpringBootWeb" class="headerlink" title="SpringBootWeb"></a>SpringBootWeb</h3><p>静态资源，HTML，CSS，JavaScript</p><p>动态资源，会根据用户请求和其他数据动态生成的，内容可能会在每次请求时都发生变化。Spring Framework</p><p>java程序开发的动态资源来说，我们通常会将这些动态资源部署在<strong>Tomcat</strong>，这样的Web服务器中运行</p><h3 id="Http协议"><a href="#Http协议" class="headerlink" title="Http协议"></a>Http协议</h3><p><strong>基于TCP协议</strong></p><p><strong>基于请求-响应模型</strong></p><p>请求和响应是一一对应关系</p><p><strong>HTTP协议是无状态协议</strong></p><ul><li>缺点:  多次请求间不能共享数据</li><li>优点:  速度快</li></ul><p>?京东购物。加入购物车和去购物车结算是两次请求</p><p>提出了使用会话技术(Cookie、Session)来解决这个问题</p><p>HTTP协议又分为：请求协议和响应协议</p><h3 id="HTTP请求协议"><a href="#HTTP请求协议" class="headerlink" title="HTTP请求协议"></a>HTTP请求协议</h3><p><strong>请求行、请求头 、请求体</strong></p><p>![image-20250104201559849](&#x2F;Users&#x2F;liutao&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20250104201559849.png)</p><ul><li><p><strong>请求行</strong>(以上图中红色部分) ：HTTP请求中的第一行数据。由：<code>请求方式</code>、<code>资源路径</code>、<code>协议/版本</code>组成（之间使用空格分隔）</p></li><li><p>资源路径：&#x2F;brand&#x2F;findAll?name&#x3D;OPPO&amp;status&#x3D;1</p><ul><li>请求路径：&#x2F;brand&#x2F;findAll</li><li>请求参数：name&#x3D;OPPO&amp;status&#x3D;1<ul><li>请求参数是以key&#x3D;value形式出现</li><li>多个请求参数之间使用<code>&amp;</code>连接</li></ul></li><li>请求路径和请求参数之间使用<code>?</code>连接</li></ul></li><li><p><strong>请求头</strong>(以上图中黄色部分) ：第二行开始，上图黄色部分内容就是请求头。格式为key: value形式 </p><ul><li>http是个无状态的协议，所以在请求头设置浏览器的一些自身信息和想要响应的形式。这样服务器在收到信息后，就可以知道是谁，想干什么了</li></ul></li><li><p>常见的HTTP请求头有:</p><ul><li><table><thead><tr><th>请求头</th><th>含义</th></tr></thead><tbody><tr><td>Host</td><td>表示请求的主机名</td></tr><tr><td>User-Agent</td><td>浏览器版本。 例如：Chrome浏览器的标识类似Mozilla&#x2F;5.0 …Chrome&#x2F;79 ，IE浏览器的标识类似Mozilla&#x2F;5.0 (Windows NT …)like Gecko</td></tr><tr><td>Accept</td><td>表示浏览器能接收的资源类型，如text&#x2F;*，image&#x2F;<em>或者</em>&#x2F;*表示所有；</td></tr><tr><td>Accept-Language</td><td>表示浏览器偏好的语言，服务器可以据此返回不同语言的网页；</td></tr><tr><td>Accept-Encoding</td><td>表示浏览器可以支持的压缩类型，例如gzip, deflate等。</td></tr><tr><td>Content-Type</td><td>请求主体的数据类型</td></tr><tr><td>Content-Length</td><td>数据主体的大小（单位：字节）</td></tr></tbody></table></li></ul></li><li><p>请求体 ：存储请求参数</p><ul><li>GET请求的请求参数在请求行中，故不需要设置请求体</li></ul></li><li><p><strong>POST方式的请求协议</strong></p></li><li><p><strong>请求体</strong>(以上图中绿色部分) ：存储请求参数 </p><ul><li>请求体和请求头之间是有一个空行隔开（作用：用于标记请求头结束）</li></ul><h3 id="HTTP响应协议"><a href="#HTTP响应协议" class="headerlink" title="HTTP响应协议"></a>HTTP响应协议</h3><p><strong>响应行 、响应头 、响应体</strong></p><ul><li>响应行(以上图中红色部分)：响应数据的第一行。响应行由<code>协议及版本</code>、<code>响应状态码</code>、<code>状态码描述</code>组成</li></ul><table><thead><tr><th>状态码分类</th><th>说明</th></tr></thead><tbody><tr><td>1xx</td><td>响应中 — 临时状态码。表示请求已经接受，告诉客户端应该继续请求或者如果已经完成则忽略</td></tr><tr><td>2xx</td><td>成功 — 表示请求已经被成功接收，处理已完成</td></tr><tr><td>3xx</td><td>重定向 — 重定向到其它地方，让客户端再发起一个请求以完成整个处理</td></tr><tr><td>4xx</td><td>客户端错误 — 处理发生错误，责任在客户端，如：客户端的请求一个不存在的资源，客户端未被授权，禁止访问等</td></tr><tr><td>5xx</td><td>服务器端错误 — 处理发生错误，责任在服务端，如：服务端抛出异常，路由出错，HTTP版本不支持等</td></tr></tbody></table><ul><li><p>响应头(以上图中黄色部分)：响应数据的第二行开始。格式为key：value形式</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">Content-<span class="hljs-keyword">Type</span>：表示该响应内容的类型，例如<span class="hljs-type">text</span>/html，image/jpeg ；<br><br>Content-Length：表示该响应内容的长度（字节数）；<br><br>Content-<span class="hljs-keyword">Encoding</span>：表示该响应压缩算法，例如gzip ；<br><br><span class="hljs-keyword">Cache</span>-Control：指示客户端应如何缓存，例如max-age=<span class="hljs-number">300</span>表示可以最多缓存<span class="hljs-number">300</span>秒 ;<br><br><span class="hljs-keyword">Set</span>-Cookie: 告诉浏览器为当前页面所在的域设置cookie<br></code></pre></td></tr></table></figure></li><li><p>响应体(以上图中绿色部分)： 响应数据的最后一部分。存储响应的数据</p><ul><li>响应体和响应头之间有一个空行隔开（作用：用于标记响应头结束）</li></ul><p>controller方法中的return的结果，怎么就可以响应给浏览器呢？</p></li></ul><p>答案：使用@ResponseBody注解</p><ul><li>类型：方法注解、类注解</li><li>位置：书写在Controller方法上或类上</li><li>作用：将方法返回值直接响应给浏览器，如果返回值类型是实体对象&#x2F;集合，将会转换为JSON格式后在响应给浏览器</li></ul><p>在类上加了@RestController注解，而这个注解是由两个注解组合起来的，分别是：@Controller 、@ResponseBody。 那也就意味着，我们在类上已经添加了@ResponseBody注解了，而一旦在类上加了@ResponseBody注解，就相当于该类所有的方法中都已经添加了@ResponseBody注解。</p></li></ul><h3 id="分层解耦"><a href="#分层解耦" class="headerlink" title="分层解耦"></a>分层解耦</h3><ol><li><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3></li></ol><p>单一职责原则：一个类或一个方法，就只做一件事情，只管一块功能。</p><p>这样就可以让类、接口、方法的复杂度更低，可读性更强，扩展性更好，也更利于后期的维护。</p><ul><li>Controller：控制层。接收前端发送的请求，对请求进行处理，并响应数据。</li><li>Service：业务逻辑层。处理具体的业务逻辑。</li><li>Dao：数据访问层(Data Access Object)，也称为持久层。负责数据访问操作，包括数据的增、删、改、查。</li></ul><p>![image-20250104220004637](&#x2F;Users&#x2F;liutao&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20250104220004637.png)</p><ol><li>解耦</li></ol><p>Service中调用Dao层中的内容，称为层与层之间的耦合</p><h4 id="解耦思路"><a href="#解耦思路" class="headerlink" title="解耦思路"></a>解耦思路</h4><p><strong>1). 首先不能在EmpController中使用new对象。代码如下</strong></p><ul><li><p><strong>控制反转：</strong> Inversion Of Control，简称<strong>IOC</strong>。对象的创建控制权由程序自身转移到外部（容器），这种思想称为控制反转。</p><ul><li>对象的创建权由程序员主动创建转移到容器(由容器创建、管理对象)。这个容器称为：IOC容器或Spring容器。</li></ul></li><li><p><strong>依赖注入：</strong> Dependency Injection，简称<strong>DI</strong>。容器为应用程序提供运行时，所依赖的资源，称之为依赖注入。</p><ul><li>程序运行时需要某个资源，此时容器就为其提供这个资源。</li><li>例：EmpController程序运行时需要EmpService对象，Spring容器就为其提供并注入EmpService对象。</li></ul></li><li><p><strong>bean对象：</strong>IOC容器中创建、管理的对象，称之为：bean对象。</p></li></ul><p>在实现类加上 <code>@Component</code> 注解，就代表把当前类产生的对象交给IOC容器管理。（IOC可以造）</p><p>在需要类的声明上加上**@Autowired**注解，代表注入依赖。(可以从IOC容器中取)</p><p>声明bean的四大注解，要想生效，还需要被组件扫描注解 <code>@ComponentScan</code> 扫描</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Algorithm</title>
    <link href="/2024/11/15/algorithm/"/>
    <url>/2024/11/15/algorithm/</url>
    
    <content type="html"><![CDATA[<h1 id="Algorithm"><a href="#Algorithm" class="headerlink" title="Algorithm"></a>Algorithm</h1><h2 id="Manacher"><a href="#Manacher" class="headerlink" title="Manacher"></a>Manacher</h2><p>回文字符串最优解法</p><p>链接<a href="https://blog.csdn.net/qq_40342400/article/details/124302078">https://blog.csdn.net/qq_40342400/article/details/124302078</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/11/11/hello-world/"/>
    <url>/2024/11/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Java</title>
    <link href="/2024/11/11/Java/"/>
    <url>/2024/11/11/Java/</url>
    
    <content type="html"><![CDATA[<h1 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h1><h2 id="Point"><a href="#Point" class="headerlink" title="Point"></a>Point</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-string">&quot;-&quot;</span>.repeat(count)<br></code></pre></td></tr></table></figure><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>不能存基本数据类型，只能存引用数据类型和包装类</p><p>ArrayList</p><p>泛型<Type></p><p>Comparator<Type>接口,重写compare方法进行使用,ArrayList.sort(list,Comparator<type>)</p><p>compareTo(Object o){}</p><p>![image-20241210172404281](&#x2F;Users&#x2F;liutao&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20241210172404281.png)</p><h3 id="static-修饰词"><a href="#static-修饰词" class="headerlink" title="static(修饰词)"></a>static(修饰词)</h3><p>变量：相同类型不同对象之间的数据共享</p><p>public static int a;</p><p>可以类名调用</p><p>内存：堆中，静态区</p><p>类内存分配（字节码到方法区）</p><p>![image-20241111121638273](&#x2F;Users&#x2F;liutao&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20241111121638273.png)</p><p>方法：</p><p>javabean类</p><p>描述一类事物</p><p>测试类</p><p>带有main方法，用于测试</p><p>工具类</p><p>帮助实现的工具，Math等（私有化构造方法）</p><p>工具类就使用static修饰词</p><p>static 注意事项</p><p>静态方法只能访问静态变量</p><p><code>this</code> 引用的是当前对象的实例，而静态方法与类本身关联，不依赖于任何特定的对象实例。因此，静态方法并不需要 <code>this</code> 来访问，调用它时不需要实例对象。</p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>class Student extends Person{}</p><p>默认父类:Object()</p><p>子类能继承父类</p><p>构造方法不能继承</p><p>this.name 本类</p><p>super.name 父类</p><p>this,super 都符合就近原则，本类找不到就父类找，直到找到</p><p>成员变量</p><p>private 继承但不可直接使用</p><p>成员方法</p><p>虚方法表（非private，非static，非final）继承</p><p>内存分析工具</p><p>jps  查看类的ID</p><p>jhsdb 内存查看</p><p>重新，就是覆盖虚方发表中的方法。</p><p>父类构造方法</p><p>Super()父类无参构造，可以有参构造</p><p>this()本类构造方法</p><p>类的基本方法，ClassLayout.praseInstance(calss s )</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>子类对象赋值给父类引用</p><p>继承关系</p><p>父类引用</p><p>方法重写</p><p>Person  p &#x3D; new Student()</p><p>成员变量，与成员方法区别：</p><p>成员变量没有重写这一个说法，就近原则，而成员方法会调用子类重写的方法。</p><p>编译的时候看父类的声明，父类没有就报错</p><p>成员变量，编译看左边，运行看左边</p><p>成员方法，编译看左边，运行看右边</p><p>使用：</p><p>定义方法，传入参数是父类，就可以接受所有子类的传入</p><p>类型强制转换</p><p>(Student) p;</p><p>判断引用是不是某类型</p><p>引用 instanceof type</p><p>引用 instanceof type 引用1</p><h3 id="包"><a href="#包" class="headerlink" title="包"></a>包</h3><p>包就是文件夹</p><p>package 包名;</p><p>不需要导入包：1同一个包中的类。2Java.lang包中的类</p><h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><p>修饰方法</p><p>不能够重写</p><p>修饰类</p><p>不能够被继承</p><p>修饰变量</p><p>变量只能够被赋值一次</p><p>![image-20241113101959831](&#x2F;Users&#x2F;liutao&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20241113101959831.png)</p><p>修饰引用数据类型</p><p>地址不能够变</p><p>![image-20241113102927823](&#x2F;Users&#x2F;liutao&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20241113102927823.png)</p><h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p>{}</p><h4 id="局部代码块（淘汰）"><a href="#局部代码块（淘汰）" class="headerlink" title="局部代码块（淘汰）"></a>局部代码块（淘汰）</h4><p>提前结束变量的生命周期</p><h4 id="构造代码块-淘汰"><a href="#构造代码块-淘汰" class="headerlink" title="构造代码块(淘汰)"></a>构造代码块(淘汰)</h4><p>构造方法中重复的代码,写在成员位置代码块</p><h4 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h4><p>Static{}</p><p>只执行一次</p><p>类加载时，执行一些代码块</p><h3 id="抽象类和抽象方法"><a href="#抽象类和抽象方法" class="headerlink" title="抽象类和抽象方法"></a>抽象类和抽象方法</h3><p>public abstract class </p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>行为的抽象</p><p>public interface 接口名{}</p><p>public class 类名 implements 接口名1,接口名2{}</p><p>接口成员变量，只能够是常量</p><p>构造方法，无</p><p>成员方法，jdk7 只能够抽象方法</p><p>（类中得我接口，抽象方法）</p><p>如何抽象出类（自下而上，分类，行为抽取，抽取接口）</p><p>接口升级的问题</p><p>接口升级，实现类必须全部实现才能执行，但是接口升级的同时，实现的类也需要能够运行。</p><p>默认方法</p><p>非抽象方法，可以不重写</p><p>public default 返回值类型 方法名(){}</p><p>接口中可以有静态方法和私有方法</p><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>内部类可以使用外部类的成员，包括私有。</p><h4 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h4><p>new 类名(){方法重写};</p><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><type><p>限定集合类型</p><p>伪泛型。内部存储依旧是Object,取出来的时候强转相应的类型</p><p>泛型不能基本类型，只能写包装类</p><p>写在</p><h4 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h4><p>类名&lt;类型&gt;</p><h4 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h4><p>修饰符 &lt;类型&gt;返回值类型 方法名(类型 变量名){}</p><h4 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h4><p>修饰符 interface 接口名<E>{}</p><p>实现时给定类型,或者实现类继承泛型.</p><p>泛型不具备继承性。想要限定类型的范围(继承),使用?</p><p>方法名(ArrayList&lt;? extend E&gt; list){}&#x2F;&#x2F;E的子类及其以下</p><p>方法名(ArrayList&lt;? super E&gt; list){}&#x2F;&#x2F;E的父类及以上</p><h3 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h3><p>函数式接口,有且仅有一个抽象方法的接口(抽象类不行)</p><p>(参数1,参数2)-&gt;{实现方法}</p><h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h4 id="Map-双列集合"><a href="#Map-双列集合" class="headerlink" title="Map(双列集合)"></a>Map(双列集合)</h4><p>put&#x2F;&#x2F;添加，覆盖,返回覆盖的值</p><p>remove</p><p>containskey</p><p>containvalue</p><p>clear</p><h4 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h4><p>Set<String> keys &#x3D; map.keySet();</p><p>map.get(key);</p><p>map.entrySet();</p><p>&#x2F;&#x2F;键值对</p><h4 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h4><p>HashMap的键位置如果存储的是自定义对象，需要重写hashCode和equals方法。</p><p>HashMap源码</p><h4 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h4><p>(双向链表记录顺序)</p><h4 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h4><p>按指定的顺序规则进行排序。</p><h4 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h4><p>最多只有一个可变参数，只能写在最后</p><p>int…args（本质上是数组）</p><h4 id="Collections-单列集合"><a href="#Collections-单列集合" class="headerlink" title="Collections(单列集合)"></a>Collections(单列集合)</h4><p>(List)(ArrayList,LinkedList)</p><p>(Set)(HashSet,TreeSet)</p><p>(HashSet)(LinkedHashSet)</p><p>Java.util.collections集合工具类,集合顶层接口</p><h4 id="遍历-1"><a href="#遍历-1" class="headerlink" title="遍历"></a>遍历</h4><h5 id="迭代器遍历"><a href="#迭代器遍历" class="headerlink" title="迭代器遍历"></a>迭代器遍历</h5><p>不依赖索引.</p><p>Iterator<E>  iterator().是Collections中的方法,获取迭代对象</p><p>Iter.hasNext();是否还有下一个,返回boolean值</p><p>Iter.next();返回下一个.</p><p>迭代过程中，不能用集合中增加或者删除，但是可以使用迭代器中的删除。</p><h5 id="增强for遍历"><a href="#增强for遍历" class="headerlink" title="增强for遍历"></a>增强for遍历</h5><p>底层就是一个迭代器</p><h5 id="Lambda表达式遍历"><a href="#Lambda表达式遍历" class="headerlink" title="Lambda表达式遍历"></a>Lambda表达式遍历</h5><p>coll.forEach()</p><h5 id="批量添加元素"><a href="#批量添加元素" class="headerlink" title="批量添加元素"></a>批量添加元素</h5><p>addAll()</p><p>Collections.addAll(list ,elements 1,elements 2,…)</p><h5 id="打乱List集合元素顺序"><a href="#打乱List集合元素顺序" class="headerlink" title="打乱List集合元素顺序"></a>打乱List集合元素顺序</h5><p>Collections.Shuffle(list)</p><h4 id="不可变集合"><a href="#不可变集合" class="headerlink" title="不可变集合"></a>不可变集合</h4><p>不可修改集合内容</p><p>List<String> list &#x3D; list.of(“ “,” “);</p><p>Set.of()</p><p>Map.of()</p><h3 id="Stream流"><a href="#Stream流" class="headerlink" title="Stream流"></a>Stream流</h3><h4 id="得到stream流"><a href="#得到stream流" class="headerlink" title="得到stream流"></a>得到stream流</h4><p>流会自动关闭，不能使用两次流，使用链式编程</p><p>单列集合</p><p>List.stream()</p><p>双列集合</p><p>转换成单列集合,keySet(),entrySet()</p><p>数组</p><p>零散</p><p>调用API</p><h4 id="中间方法"><a href="#中间方法" class="headerlink" title="中间方法"></a>中间方法</h4><p>filter()过滤</p><p>limit(int i )个数</p><p>Skip(int i) 跳过几个元素</p><p>Distinct()去除重复</p><p>Concat()合并流</p><p>Map(new Function&lt;String ,Object&gt;)类型转换</p><h4 id="终结方法"><a href="#终结方法" class="headerlink" title="终结方法"></a>终结方法</h4><p>forEach()遍历</p><p>count()统计</p><p>toArray()收集数组</p><p>collect(Collector.toList())收集集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> day05.stream.test02;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.function.Function;<br><span class="hljs-keyword">import</span> java.util.function.Predicate;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        创建ArrayList添加字符串（zhangsan ,23//lisi,24//wangwua,25）</span><br><span class="hljs-comment">        ,保存大于24的人，收集到map</span><br><span class="hljs-comment">         */</span><br>        ArrayList&lt;String&gt; list =<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Collections.addAll(list,<span class="hljs-string">&quot;zhangsan,23&quot;</span>,<span class="hljs-string">&quot;lisi,24&quot;</span>,<span class="hljs-string">&quot;wangwu,25&quot;</span>);<br><br><span class="hljs-comment">//        Map&lt;String, Integer&gt; collect = list.stream().filter(s -&gt; Integer.parseInt(s.split(&quot;,&quot;)[1]) &gt; 24).collect(Collectors.toMap(</span><br><span class="hljs-comment">//                new Function&lt;String, String&gt;() &#123;</span><br><span class="hljs-comment">//                    @Override</span><br><span class="hljs-comment">//                    public String apply(String s) &#123;</span><br><span class="hljs-comment">//                        return s.split(&quot;,&quot;)[0];</span><br><span class="hljs-comment">//                    &#125;</span><br><span class="hljs-comment">//                &#125;,</span><br><span class="hljs-comment">//                new Function&lt;String, Integer&gt;() &#123;</span><br><span class="hljs-comment">//                    @Override</span><br><span class="hljs-comment">//                    public Integer apply(String s) &#123;</span><br><span class="hljs-comment">//                        return Integer.parseInt(s.split(&quot;,&quot;)[1]);</span><br><span class="hljs-comment">//                    &#125;</span><br><span class="hljs-comment">//                &#125;</span><br><span class="hljs-comment">//        ));</span><br>        Map&lt;String, Integer&gt; collect = list.stream().filter(s -&gt; Integer.parseInt(s.split(<span class="hljs-string">&quot;,&quot;</span>)[<span class="hljs-number">1</span>]) &gt;= <span class="hljs-number">24</span>).collect(Collectors.toMap(s -&gt; s.split(<span class="hljs-string">&quot;,&quot;</span>)[<span class="hljs-number">0</span>], s -&gt; Integer.parseInt(s.split(<span class="hljs-string">&quot;,&quot;</span>)[<span class="hljs-number">1</span>])));<br>        System.out.println(collect);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>收集成Map是将流上的数据组合成字符串，再对字符串做处理，放入到建和值中</p><p>Map()类型转换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> day05.stream.test03;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collections;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.function.Function;<br><span class="hljs-keyword">import</span> java.util.stream.Collector;<br><span class="hljs-keyword">import</span> java.util.stream.Collectors;<br><span class="hljs-keyword">import</span> java.util.stream.Stream;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        两个list集合，第一个集合中，存储6名男人信息（“张三,23”）;第二个存贮6名女人</span><br><span class="hljs-comment">        男只要名字长度为3前2名</span><br><span class="hljs-comment">        女只要姓&quot;yang&quot;的，不要第一个</span><br><span class="hljs-comment">        过滤后合并到一起</span><br><span class="hljs-comment">        以上封装成Actor对象</span><br><span class="hljs-comment">        将所有人保存到List中</span><br><span class="hljs-comment">         */</span><br>        ArrayList&lt;String&gt; boyList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        ArrayList&lt;String&gt; girlList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        Collections.addAll(boyList, <span class="hljs-string">&quot;张三,23&quot;</span>, <span class="hljs-string">&quot;张三风,14&quot;</span>, <span class="hljs-string">&quot;李三思,25&quot;</span>, <span class="hljs-string">&quot;王三一,26&quot;</span>, <span class="hljs-string">&quot;赵三囍,37&quot;</span>, <span class="hljs-string">&quot;钱三强,28&quot;</span>);<br>        Collections.addAll(girlList, <span class="hljs-string">&quot;yangyi,34&quot;</span>, <span class="hljs-string">&quot;wangkeer,12&quot;</span>, <span class="hljs-string">&quot;dianzhatian,23&quot;</span>, <span class="hljs-string">&quot;weifangyu,45&quot;</span>, <span class="hljs-string">&quot;yangyangle,23&quot;</span>, <span class="hljs-string">&quot;yabngzibo,34&quot;</span>);<br><br>​        boyList.stream().filter(s -&gt; s.split(<span class="hljs-string">&quot;,&quot;</span>)[<span class="hljs-number">0</span>].length() == <span class="hljs-number">3</span>).limit(<span class="hljs-number">2</span>).forEach(S -&gt; System.out.println(S));<br>​        girlList.stream().filter(s -&gt; s.split(<span class="hljs-string">&quot;,&quot;</span>)[<span class="hljs-number">0</span>].substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>).equals(<span class="hljs-string">&quot;yang&quot;</span>)).skip(<span class="hljs-number">1</span>).forEach(S -&gt; System.out.println(S));<br><br>​        Stream&lt;String&gt; boyStream = boyList.stream().filter(s -&gt; s.split(<span class="hljs-string">&quot;,&quot;</span>)[<span class="hljs-number">0</span>].length() == <span class="hljs-number">3</span>).limit(<span class="hljs-number">2</span>);<br>​        Stream&lt;String&gt; girlStream = girlList.stream().filter(s -&gt; s.split(<span class="hljs-string">&quot;,&quot;</span>)[<span class="hljs-number">0</span>].substring(<span class="hljs-number">0</span>, <span class="hljs-number">4</span>).equals(<span class="hljs-string">&quot;yang&quot;</span>)).skip(<span class="hljs-number">1</span>);<br>​        Stream&lt;String&gt; aggrStream = Stream.concat(boyStream, girlStream);<br><br>​        <span class="hljs-comment">//aggrStream.forEach(System.out::println);</span><br><br>​        List&lt;Actor&gt; collect = aggrStream.map(<br>​                s -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Actor</span>(s.split(<span class="hljs-string">&quot;,&quot;</span>)[<span class="hljs-number">0</span>], Integer.parseInt(s.split(<span class="hljs-string">&quot;,&quot;</span>)[<span class="hljs-number">1</span>]))<br>​        ).collect(Collectors.toList());<br><br>​        System.out.println(collect);<br>​    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h3><p>要求</p><p>1、引用处必须是函数式接口</p><p>2、被引用方法必须已经存在</p><p>3、被引用方法的形参和返回值需要和抽象方法保持一致（类::method注意被引用的方法形参是跟第二个参数后面的保持一致）</p><p>静态方法引用 格式: class::method</p><p>成员方法引用 格式: new class()::method，如果引用流中数据类成员方法(class::methed)，如果是其他类(对象::method)</p><p>本类引用 this::method</p><p>父类引用super::method</p><p>构造方法引用class::new</p><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><h4 id="error"><a href="#error" class="headerlink" title="error"></a>error</h4><p>严重错误，系统级别错误。</p><h4 id="exception"><a href="#exception" class="headerlink" title="exception"></a>exception</h4><p>异常，可能出现的问题</p><h5 id="runtimeexception"><a href="#runtimeexception" class="headerlink" title="runtimeexception"></a>runtimeexception</h5><p>编译不会出现问题，但在运行时会产生错误。（本身及其子类               ）</p><h5 id="编译异常"><a href="#编译异常" class="headerlink" title="编译异常"></a>编译异常</h5><p>编译时就出现的错误。</p><h3 id="File"><a href="#File" class="headerlink" title="File"></a>File</h3><p>成员方法</p><p>获取并遍历</p><p>File[] listFiles();</p><h3 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h3><p>字节流：操作所有类型的文件(拷贝使用场景)</p><p>字符流：操作纯文本文件(读取纯文本文件中的数据，往纯文本文件中写入)</p><h4 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h4><p>父级路径必须存在，存在文件会清空文件内容</p><h5 id="写入"><a href="#写入" class="headerlink" title="写入"></a>写入</h5><p>Write(byte b)</p><p>wrtie(byte[] b)</p><p>&#x2F;&#x2F;byte[]  &#x3D; String.getbytes();&#x2F;&#x2F;得到字节流</p><p>![image-20241217203923457](&#x2F;Users&#x2F;liutao&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20241217203923457.png)</p><p>续写,fileoutputstream(str,append&#x3D;true)</p><p>释放资源close()</p><h4 id="FileinputStream"><a href="#FileinputStream" class="headerlink" title="FileinputStream"></a>FileinputStream</h4><p>Read()&#x2F;&#x2F;读不到返回-1</p><p>循环读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> FileInputStream(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-type">int</span> b;<br><span class="hljs-keyword">while</span>((b=fis.read())!=-<span class="hljs-number">1</span>)&#123;<br>System.out.print(b);<br>&#125;<br>fis.close();<br><br></code></pre></td></tr></table></figure><p>文件拷贝</p><p>释放资源，先开后释放</p><p>多字节读取</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> len;<br><span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[len];<br><span class="hljs-type">int</span> <span class="hljs-variable">lenRead</span> <span class="hljs-operator">=</span> fis.read(bytes);<br></code></pre></td></tr></table></figure><h3 id="字符集"><a href="#字符集" class="headerlink" title="字符集"></a>字符集</h3><p>GBK</p><p>2字节存储，高位字节二进制1为开头（英文开头是0）区分</p><p>兼容ASCII</p><p>unicode</p><p>（utf-16,utf-32）</p><p>utf-8编码规则（1-4个字节）</p><p>ASCII 1一个字节</p><p>简体中文 3个字节</p><p>![image-20241219155426656](&#x2F;Users&#x2F;liutao&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20241219155426656.png)</p><p>(首位一定是1)</p><p>不要用字节流读取文本文件</p><p>getBytes()使用默认方式编码</p><p>getBytes(String charsetName) 使用指定的方式进行编码</p><p>String(byte[] bytes,String charsetName) 使用指定方式进行解码</p><h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><p>字符流 &#x3D; 字节流+字符集</p><h4 id="输入流Reader"><a href="#输入流Reader" class="headerlink" title="输入流Reader"></a>输入流Reader</h4><p>FileReader fr</p><p>Fr.read()底层</p><p>按字符集读取</p><p>解码转成十进制数</p><p>需要强转(char) chr</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-type">int</span> ch;<br><span class="hljs-keyword">while</span>((ch = fr.read())!=-<span class="hljs-number">1</span>)&#123;<br>System.out.print((<span class="hljs-type">char</span>)ch);<br>&#125;<br></code></pre></td></tr></table></figure><p>注意有参数的read()</p><p>读取数据，解码，十进制强转，放到数组中</p><p>read()中有缓冲区,(8192字节).</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>();<br>fr.read();<br><span class="hljs-comment">//创建缓冲区</span><br><span class="hljs-type">FileReader</span> <span class="hljs-variable">fr1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>();<br><span class="hljs-comment">//文件数据被清空</span><br><span class="hljs-type">int</span> ch;<br><br><span class="hljs-keyword">while</span>((ch = fr.read())!=-<span class="hljs-number">1</span>)&#123;<br>System.out.println((<span class="hljs-type">char</span>)ch);<br>&#125;<br><br><span class="hljs-comment">//能够读取到缓冲区的数据，但是无法读取文件数据,只会清空文件数据，但是不会清空缓冲区数据</span><br></code></pre></td></tr></table></figure><h4 id="输出流Writer"><a href="#输出流Writer" class="headerlink" title="输出流Writer"></a>输出流Writer</h4><p>FileWriter</p><p>FileWriter(String pasth,boolean append)续写</p><p>字节流没有缓冲区，但是字符流有缓冲区</p><p>缓冲区写入文件3种情况</p><p>缓冲区满了&#x2F;&#x2F;刷新flush()&#x2F;&#x2F;close()</p><h3 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h3><p>![image-20241223153411523](&#x2F;Users&#x2F;liutao&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20241223153411523.png)</p><h4 id="字节缓冲流"><a href="#字节缓冲流" class="headerlink" title="字节缓冲流"></a>字节缓冲流</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">BufferInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>());<br><span class="hljs-type">BufferOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>());<br><br><span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-type">int</span> len;<br><span class="hljs-keyword">while</span>((len = bis.read())!=-<span class="hljs-number">1</span>)&#123;<br>bos.write(bytes,<span class="hljs-number">0</span>,len);<br>&#125;<br>bis.close();<br>bos.close();<br><span class="hljs-comment">//缓冲区是磁盘读到内存的缓存（磁盘-&gt;内存），byte[1024]则是内存中转手的数据(内存-&gt;内存)</span><br></code></pre></td></tr></table></figure><p>![image-20241223155023942](&#x2F;Users&#x2F;liutao&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20241223155023942.png)</p><h3 id="字符缓冲流"><a href="#字符缓冲流" class="headerlink" title="字符缓冲流"></a>字符缓冲流</h3><p>BufferReader(new FileReader());</p><p>BufferWriter(new FileWriter());</p><p>带有默认的8k的字符的缓冲区</p><p>readLine()&#x2F;&#x2F;无数据返回null，不会保存换行</p><p>newLine()跨平台的写入换行</p><h3 id="转换流"><a href="#转换流" class="headerlink" title="转换流"></a>转换流</h3><p>字符流与字节流的桥梁</p><p>![image-20241223163005262](&#x2F;Users&#x2F;liutao&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20241223163005262.png)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//转换流</span><br><span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(),<span class="hljs-string">&quot;GBK&quot;</span>);<br><br><span class="hljs-type">OutputStreamWriter</span> <span class="hljs-variable">osw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(),<span class="hljs-string">&quot;UTF-8&quot;</span>);<br><br><span class="hljs-type">int</span> b;<br><span class="hljs-keyword">while</span>((b= isr.read())!=-<span class="hljs-number">1</span>)&#123;<br>osw.write(b);<br>&#125;<br>isr.close();<br>osw.close();<br><br><span class="hljs-comment">//JDK11后,替换方案</span><br><br><span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(path,Charset.forName(<span class="hljs-string">&quot;GBK&quot;</span>));<br><span class="hljs-type">FileWriter</span> <span class="hljs-variable">fw</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(path,Charset.forName(<span class="hljs-string">&quot;UTF-8&quot;</span>));<br><br><span class="hljs-type">int</span> b;<br><span class="hljs-keyword">while</span>((b=fr.read())!=-<span class="hljs-number">1</span>)&#123;<br>fw.write(b);<br>&#125;<br>fr.close();<br>fw.close();<br></code></pre></td></tr></table></figure><p>字节流想要使用字符流中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用字符流readline()读取一整行字节流</span><br><span class="hljs-type">BfferReader</span> <span class="hljs-variable">bf</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(path)));<br><br>String line;<br><span class="hljs-keyword">while</span>((line = bf.readline())!=<span class="hljs-literal">null</span>)&#123;<br>System.out.println(line);<br>&#125;<br>bf.close();<br></code></pre></td></tr></table></figure><h3 id="序列化流"><a href="#序列化流" class="headerlink" title="序列化流"></a>序列化流</h3><p>字节流的一种</p><p>java对象写入到本地文件</p><p>Serializable&#x2F;&#x2F;没有抽象方法的接口，标志性接口，标志该类可以被序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ObiectOutputStreram</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(FileOutputStream(path));<br>oos.writeObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>));<br>oos.close();<br></code></pre></td></tr></table></figure><h3 id="反序列化流"><a href="#反序列化流" class="headerlink" title="反序列化流"></a>反序列化流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(path));<br><br><span class="hljs-type">Student</span> <span class="hljs-variable">stu</span> <span class="hljs-operator">=</span> (Student) ois.readObject();<br><br>ois.close();<br><br><br></code></pre></td></tr></table></figure><p>如果javaBean发生修改，增加版本号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//在javaBean中增加版本号</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">1L</span>;<br><span class="hljs-comment">//设定部分参数不能够序列化,添加瞬态关键字</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">transient</span> String address;<br></code></pre></td></tr></table></figure><p>多次写入和读取对象，注意封装到ArrayList中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjcetOutputStrem</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(path));<br><br><span class="hljs-comment">//封装</span><br>ArrayList&lt;Student&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>);<br>list.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>);<br><br>oos.writeObject(list);<br>oos.close();<br><span class="hljs-comment">//读取</span><br><br><span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(path));<br><br>ArrayList&lt;Student&gt; listRead = (ArrayList&lt;Student&gt;)ois.readObject();<br><br>ois.close();<br></code></pre></td></tr></table></figure><h3 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h3><h4 id="printStream"><a href="#printStream" class="headerlink" title="printStream"></a>printStream</h4><p> write</p><p>&#x2F;&#x2F;数据远洋输出&#x2F;&#x2F;写出+自动刷新+自动换行</p><p>print</p><p>println</p><p>printf</p><p>（System.out就是一个打印流）</p><h4 id="printWriter"><a href="#printWriter" class="headerlink" title="printWriter"></a>printWriter</h4><p>有缓冲区，自动刷新需要手动开启</p><h3 id="解压缩流"><a href="#解压缩流" class="headerlink" title="解压缩流"></a>解压缩流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">src</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);<br><span class="hljs-type">File</span> <span class="hljs-variable">dest</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);<br><span class="hljs-type">zipinputStream</span> <span class="hljs-variable">zip</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">zipInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(src));<br><br>zipEntry entry;<br><span class="hljs-keyword">while</span>((entry = zip.getEntry())!=<span class="hljs-literal">null</span>)&#123;<br>System.out.print(entry);<br><span class="hljs-keyword">if</span>(entry.isDirectory())&#123;<br><span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(dest,entry.toString());<br>file.mkdir();<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-comment">//读取文件数据</span><br><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(dest,entry,toString()));<br><span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-type">int</span> len;<br><span class="hljs-keyword">while</span>((len=zip.read())!=-<span class="hljs-number">1</span>)&#123;<br>fos.write(bytes,<span class="hljs-number">0</span>,len);<br>&#125;<br>fos.close();<br><span class="hljs-comment">//表示一个文件读取完毕</span><br>fos.closeEntry();<br>&#125;<br>&#125;<br>zip.clsoe();<br></code></pre></td></tr></table></figure><h3 id="压缩流"><a href="#压缩流" class="headerlink" title="压缩流"></a>压缩流</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">File</span> <span class="hljs-variable">src</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(path);<br><span class="hljs-type">File</span> <span class="hljs-variable">destParent</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(pathParent);<br><span class="hljs-type">File</span> <span class="hljs-variable">dest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(destParent,src.getName()+<span class="hljs-string">&quot;.zip&quot;</span>);<br><br><span class="hljs-type">zipOutputStream</span> <span class="hljs-variable">zos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">zipOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStram</span>(dest));<br><span class="hljs-comment">//获取src中文件，变成zipEntry对象，放入压缩包中(需递归)</span><br>zip.clsoe();<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">toZip</span><span class="hljs-params">(File src ,ZipOutputStream zos,String name)</span>&#123;<br>File[] filelist = src.listFiles();<br><span class="hljs-keyword">for</span>(File file:filelist)&#123;<br><span class="hljs-keyword">if</span>(file.isFile())&#123;<br><span class="hljs-type">ZipEntry</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipEntry</span>(name + <span class="hljs-string">&quot;\\&quot;</span> + file.getName());<br><span class="hljs-comment">//创建压缩包中的文件结构</span><br>zos.putNextEntry(entry);<br><span class="hljs-comment">//写入</span><br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> enw <span class="hljs-title function_">FileInputStream</span><span class="hljs-params">(file)</span>;<br><span class="hljs-type">byte</span>[] bytes = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-type">int</span> len;<br><span class="hljs-keyword">while</span>((len = fis.read(bytes))!=-<span class="hljs-number">1</span>)&#123;<br>zos.write(bytes,<span class="hljs-number">0</span>,len);<br>&#125;<br>fis.close();<br>zos.closeEntry();<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-comment">//是文件</span><br>toZip(file,zos,name+<span class="hljs-string">&quot;\\&quot;</span>+file.getName());<br>&#125;<br>&#125;<br>zos.close()<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><h3 id="Commons-io"><a href="#Commons-io" class="headerlink" title="Commons-io"></a>Commons-io</h3><p>jar包</p><p>![image-20241224160534486](&#x2F;Users&#x2F;liutao&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20241224160534486.png)</p><h4 id="FileUtils"><a href="#FileUtils" class="headerlink" title="FileUtils"></a>FileUtils</h4><p>copyFile</p><p>readFileToString</p><h4 id="IOUtils"><a href="#IOUtils" class="headerlink" title="IOUtils"></a>IOUtils</h4><h3 id="Hutool"><a href="#Hutool" class="headerlink" title="Hutool"></a>Hutool</h3><h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><h4 id="多线程实现"><a href="#多线程实现" class="headerlink" title="多线程实现"></a>多线程实现</h4><h5 id="继承Thread"><a href="#继承Thread" class="headerlink" title="继承Thread"></a>继承Thread</h5><p>重写run()方法</p><p>Run()中书写运行代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//线程类MyThread extend Thread</span><br><span class="hljs-type">MyThread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>t1.start();<br></code></pre></td></tr></table></figure><h5 id="实现Runnable接口实现多线程"><a href="#实现Runnable接口实现多线程" class="headerlink" title="实现Runnable接口实现多线程"></a>实现Runnable接口实现多线程</h5><p>重写其中的run方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//MyRun implements Runnable</span><br><span class="hljs-comment">//获取当前线程对象currentThread()</span><br></code></pre></td></tr></table></figure><h5 id=""><a href="#" class="headerlink" title=""></a></h5><p>可以获取线程执行后的返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCallable</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Callable</span>&lt;Integer&gt;&#123;<br><span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">call</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-comment">//run code;</span><br>&#125;<br>&#125;<br><br><span class="hljs-comment">//创建多线程参数,Callable表示多线程执行的任务的数据参数</span><br><span class="hljs-type">MyCallable</span> <span class="hljs-variable">myCall</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCallable</span>();<br><span class="hljs-comment">//创建FutureTask对象(管理多线程运行结果)</span><br>FutureTask&lt;Integer&gt; ft = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FutureTask</span>&lt;&gt;(myCall);<br><span class="hljs-comment">//创建线程的对象</span><br><span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>();<br>t.start();<br><span class="hljs-comment">//获取实验结果</span><br><span class="hljs-type">Integer</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> t.get();<br></code></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>![image-20241231170316032](&#x2F;Users&#x2F;liutao&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20241231170316032.png)</p><h6 id="常见的成员方法"><a href="#常见的成员方法" class="headerlink" title="常见的成员方法"></a>常见的成员方法</h6><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">getName()<br>setName()<span class="hljs-comment">//也可以使用MyThread重写Thread的构造方法</span><br>currentThread()<span class="hljs-comment">//获取当前线程对象，当JVM启动，便会有main线程</span><br>sleep(<span class="hljs-type">long</span> time)<span class="hljs-comment">//线程休眠</span><br>setPriority(<span class="hljs-type">int</span> newPriority)<span class="hljs-comment">//设置优先级</span><br><span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">newPriority</span><span class="hljs-params">()</span><span class="hljs-comment">//获取优先级</span><br>setDaemon()<span class="hljs-comment">//设置守护进程</span><br><span class="hljs-keyword">yield</span>()<span class="hljs-comment">//出让进程</span><br>join()<span class="hljs-comment">//插入进程</span><br><br><br></code></pre></td></tr></table></figure><p>（无法抛出父类没有的异常，只能够使用try）</p><h5 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h5><p>优先级是一个概率问题</p><h5 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h5><p>当非守护进程结束后，守护进程也结束了</p><h4 id="线程声明周期"><a href="#线程声明周期" class="headerlink" title="线程声明周期"></a>线程声明周期</h4><p>![image-20241231205234338](&#x2F;Users&#x2F;liutao&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20241231205234338.png)</p><h4 id="安全问题-同步问题"><a href="#安全问题-同步问题" class="headerlink" title="安全问题-同步问题"></a>安全问题-同步问题</h4><p>锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-type">Object</span> <span class="hljs-variable">obj</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<span class="hljs-comment">//锁对象必须是唯一static</span><br><span class="hljs-comment">//一般锁对象使用class字节码文件对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-keyword">synchronized</span>(MyThread.class)&#123;<br><span class="hljs-comment">//run code</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h4><p>![image-20241231211501900](&#x2F;Users&#x2F;liutao&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20241231211501900.png)</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h4 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h4><p>Lock接口,实现类ReentrantLock</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">public</span> <span class="hljs-type">Lock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>lock.lock();<br>  <span class="hljs-keyword">try</span>&#123;<br>    <span class="hljs-comment">//code</span><br>  &#125;<span class="hljs-keyword">catch</span>&#123;<br>    <span class="hljs-comment">//error</span><br>  &#125;<span class="hljs-keyword">finally</span>&#123;<br>    lock.unlock();<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h5><p>不要写嵌套锁</p><h3 id="等待唤醒机制"><a href="#等待唤醒机制" class="headerlink" title="等待唤醒机制"></a>等待唤醒机制</h3><h3 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h3><p>![image-20250102135028873](&#x2F;Users&#x2F;liutao&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20250102135028873.png)</p><p>JVM中定义的状态</p><p>![image-20250102135300146](&#x2F;Users&#x2F;liutao&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20250102135300146.png)</p><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>线程复用，一个线程执行完毕，使用存在的线程运行当前线程</p><p>如果线程池中没有空闲的线程，则创建新的线程，没有足够的线程额，线程就排队等待</p><h4 id="ExecutorService"><a href="#ExecutorService" class="headerlink" title="ExecutorService"></a>ExecutorService</h4><h4 id="自定义线程池"><a href="#自定义线程池" class="headerlink" title="自定义线程池"></a>自定义线程池</h4><p>![image-20250102143328266](&#x2F;Users&#x2F;liutao&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20250102143328266.png)</p><h5 id="最大并行数"><a href="#最大并行数" class="headerlink" title="最大并行数"></a>最大并行数</h5><p>4核心8线程，8个逻辑处理器，并行数8</p><p>![image-20250102144349598](&#x2F;Users&#x2F;liutao&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20250102144349598.png)</p><p>thread dump 计算总时间&#x2F;cpu计算时间</p><h3 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h3><p>cs&#x2F;bs</p><p>cs本地数据，提供更好的画面</p><p>bs维护简单，本地没有数据</p><p>IP：设备在网络中的地址</p><p>端口：程序在设备中的唯一标识</p><p>协议：数据传输的规则</p><h4 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h4><p>IPV4</p><p>IPV6</p><p>![image-20250102150239409](&#x2F;Users&#x2F;liutao&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20250102150239409.png)</p><p>公网IP,局域网IP</p><p>168.192.0.0局域网ip</p><h5 id="InetAddress"><a href="#InetAddress" class="headerlink" title="InetAddress"></a>InetAddress</h5><h4 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h4><p>0~65535</p><p>0~1023是知名程序使用的端口ftp</p><h4 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h4><p>TCP</p><p>![image-20250108132454743](&#x2F;Users&#x2F;liutao&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20250108132454743.png)</p><p>UDP</p><h4 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h4><p>单播</p><p>组播224.0.0.0~239.255.255.255</p><p>广播：255.255.255.255</p><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><p>反射允许对成员变量，成员方法，构造方法的信息进行编程访问</p><p>获取class对象的三种方式</p><p>1、Class.forName() 源代码阶段 Class.forName(“包名+类名”)</p><p>2、类名.class 加载阶段</p><p>3、对象.getClass() 运行阶段</p><p>![image-20250102165312312](&#x2F;Users&#x2F;liutao&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20250102165312312.png)</p><p>![image-20250102200453645](&#x2F;Users&#x2F;liutao&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20250102200453645.png)</p><p>![image-20250102200517326](&#x2F;Users&#x2F;liutao&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20250102200517326.png)</p><p>![image-20250102200812716](&#x2F;Users&#x2F;liutao&#x2F;Library&#x2F;Application Support&#x2F;typora-user-images&#x2F;image-20250102200812716.png)</p><h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>类加载器：将class文件加载到内存中classLoader()</p><p>?</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>githubblog</title>
    <link href="/2024/11/10/githubblog/"/>
    <url>/2024/11/10/githubblog/</url>
    
    <content type="html"><![CDATA[<h1 id="github-blog-pages-error-solve"><a href="#github-blog-pages-error-solve" class="headerlink" title="github blog pages error&amp;solve"></a>github blog pages error&amp;solve</h1><h2 id="get-github-pages"><a href="#get-github-pages" class="headerlink" title="get github pages"></a>get github pages</h2><p>url:<a href="https://pages.github.com/">https://pages.github.com/</a></p><h2 id="nodes-js、hexo、主题"><a href="#nodes-js、hexo、主题" class="headerlink" title="nodes.js、hexo、主题"></a>nodes.js、hexo、主题</h2><p><a href="https://gitcode.csdn.net/65aa2e27b8e5f01e1e44c4da.html?dp_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6NDE3NDY2OSwiZXhwIjoxNzMxNzU5OTczLCJpYXQiOjE3MzExNTUxNzMsInVzZXJuYW1lIjoicXFfNDU5NDE4NjYifQ.r6fm4uOpnxdFaKUjo6FtxG7PEAbyWyxLKbWn3FZHoVM&spm=1001.2101.3001.6650.4&utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~activity-4-119089190-blog-142594777.235%5Ev43%5Epc_blog_bottom_relevance_base3&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~baidujs_baidulandingword~activity-4-119089190-blog-142594777.235%5Ev43%5Epc_blog_bottom_relevance_base3&utm_relevant_index=9">https://gitcode.csdn.net/65aa2e27b8e5f01e1e44c4da.html?dp_token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpZCI6NDE3NDY2OSwiZXhwIjoxNzMxNzU5OTczLCJpYXQiOjE3MzExNTUxNzMsInVzZXJuYW1lIjoicXFfNDU5NDE4NjYifQ.r6fm4uOpnxdFaKUjo6FtxG7PEAbyWyxLKbWn3FZHoVM&amp;spm=1001.2101.3001.6650.4&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7Ebaidujs_baidulandingword%7Eactivity-4-119089190-blog-142594777.235%5Ev43%5Epc_blog_bottom_relevance_base3&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7Ebaidujs_baidulandingword%7Eactivity-4-119089190-blog-142594777.235%5Ev43%5Epc_blog_bottom_relevance_base3&amp;utm_relevant_index=9</a></p><h2 id="git-问题"><a href="#git-问题" class="headerlink" title="git 问题"></a>git 问题</h2><h3 id="添加SSH"><a href="#添加SSH" class="headerlink" title="添加SSH"></a>添加SSH</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;@qq.com&quot;</span><br><span class="hljs-comment"># 将SSH key 添加到 ssh-agent</span><br>ssh-add id_rsa<br><span class="hljs-comment">#如果出现“Could not open a connection to your authentication agent.”的错误</span><br><span class="hljs-built_in">eval</span> <span class="hljs-string">&quot;<span class="hljs-subst">$(ssh-agent -s)</span>&quot;</span><br>ssh-add id_rsa<br><span class="hljs-comment">#验证key</span><br>ssh -T git@github.com <br></code></pre></td></tr></table></figure><p>将SSH key 添加到你的GitHub账户</p><p><img src="/images/githubblog1.png" alt="img"></p><p>链接</p><p><a href="https://blog.csdn.net/m0_69057918/article/details/132139286">https://blog.csdn.net/m0_69057918/article/details/132139286</a></p><h3 id="更换分支"><a href="#更换分支" class="headerlink" title="更换分支"></a>更换分支</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git pull --rebase origin main<br></code></pre></td></tr></table></figure><p>链接</p><p><a href="https://www.bilibili.com/opus/464126252045553313">https://www.bilibili.com/opus/464126252045553313</a></p><h3 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br>git add .<br>git commit -m <span class="hljs-string">&quot;blog&quot;</span><br>git remote add origin git@.com<br>git push origin main/git push -u origin main<br></code></pre></td></tr></table></figure><p>链接</p><p><a href="https://zhuanlan.zhihu.com/p/675458343">https://zhuanlan.zhihu.com/p/675458343</a></p><h3 id="代码安全问题"><a href="#代码安全问题" class="headerlink" title="代码安全问题"></a>代码安全问题</h3><p> <strong>error: GH013: Repository rule violations found for</strong></p><p><strong>问题描述：</strong></p><p>代码中包含明文密码等信息，会拒绝push</p><p><strong>解决方案：</strong></p><p>在push之后，后再错误信息中包含url(remove secret from commit…)访问url可以给当前push添加许可</p><p><img src="/images/githubblog2.png" alt="image-20241111194057209"></p><p>链接<a href="https://blog.51cto.com/u_12763213/10979913">https://blog.51cto.com/u_12763213/10979913</a></p><h3 id="git-connext-问题"><a href="#git-connext-问题" class="headerlink" title="git connext 问题"></a>git connext 问题</h3><p>fatal: unable to access ‘<a href="http://github.com/">http://github.com/</a>…’:<br>Failed to connect to github.com port 443 after … ms: Couldn’t connect to server</p><p>解决方法：</p><p>手动配置代理与系统代理一致</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global http.proxy http://127.0.0.1:7890<br>git config --global https.proxy http://127.0.0.1:7890<br></code></pre></td></tr></table></figure><h3 id="下载hexo-提交工具连接问题"><a href="#下载hexo-提交工具连接问题" class="headerlink" title="下载hexo 提交工具连接问题"></a>下载hexo 提交工具连接问题</h3><p>需要关闭系统代理或者设置系统代理</p><h3 id="突然出现上传不了github的情况"><a href="#突然出现上传不了github的情况" class="headerlink" title="突然出现上传不了github的情况"></a>突然出现上传不了github的情况</h3><p>疑似出现代理配置问题</p><p>在 <code>~/.ssh/config</code> 文件中添加下面的配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">Host github.com<br>    Hostname ssh.github.com<br>    Port 443<br>    User git<br><br></code></pre></td></tr></table></figure><p>链接：<a href="https://blog.csdn.net/CoolBoySilverBullet/article/details/135736862">https://blog.csdn.net/CoolBoySilverBullet/article/details/135736862</a></p><h3 id="HEXO-g-d失败"><a href="#HEXO-g-d失败" class="headerlink" title="HEXO g -d失败"></a>HEXO g -d失败</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment">## 进入你的博客根目录</span><br><span class="hljs-built_in">cd</span> /usr/hexo/<br><span class="hljs-comment">## 删除git提交内容文件夹</span><br><span class="hljs-built_in">rm</span> -rf .deploy_git/<br><span class="hljs-comment">## 执行下句</span><br>git config --global core.autocrlf <span class="hljs-literal">false</span><br><span class="hljs-comment">## 重新部署</span><br>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d<br></code></pre></td></tr></table></figure><p>链接：<a href="https://zhuanlan.zhihu.com/p/648369159">https://zhuanlan.zhihu.com/p/648369159</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
